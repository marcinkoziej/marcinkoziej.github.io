<%= header("Proca - Digital Campaign Platform") %>
<div>
    <h3>Fix The Status Quo (May 2020 - Dec 2022)</h3>
    <p><strong>Role:</strong> Founder & CTO</p>
    <p><strong>Tech Stack:</strong> Elixir, Phoenix, GraphQL, PostgreSQL, RabbitMQ, Broadway, TypeScript, React, AWS</p>

    <h4>Building Democracy with Functional Programming</h4>
    <p>Founded and led technical development of a SaaS platform for digital campaign management, architecting a scalable supporter action processing system with advanced privacy controls and high reliability. This became a fascinating case study in building multi-tenant infrastructure that could handle the diverse, mission-critical needs of activist organizations.</p>

    <h4>The Multi-Tenant Challenge</h4>
    <p>Proca served dozens of activist organizations running simultaneous campaigns, each with unique data processing requirements. Some needed real-time webhook notifications to external CRMs, others required AWS SQS integration for analytics pipelines, many needed complex email workflows with double opt-in flows and custom templates.</p>

    <p>The business challenge was delivering a reliable, scalable solution that could handle diverse processing requirements without the operational overhead of separate deployments or the reliability risks of shared processing infrastructure.</p>

    <h4>Scalable Multi-Tenant Architecture with Broadway</h4>
    <p>I designed a Broadway-based system where each organization gets its own isolated processing topology. This architecture provides complete tenant isolation - when one organization's integration fails or experiences high load, it has zero impact on other tenants' processing.</p>

    <p>The system dynamically provisions processing pipelines based on organizational configuration. Each tenant can enable any combination of features:</p>
    <ul>
        <li><strong>Automated email workflows</strong> with template customization</li>
        <li><strong>Real-time webhook delivery</strong> with intelligent retry logic</li>
        <li><strong>AWS SQS integration</strong> for data pipeline consumption</li>
        <li><strong>Custom queue interfaces</strong> for external system integration</li>
    </ul>

    <h4>Technical Implementation</h4>
    <ul>
        <li><strong>Backend:</strong> Elixir/Phoenix with GraphQL API for scalable, fault-tolerant operations</li>
        <li><strong>Message Processing:</strong> Broadway multi-stage pipelines with sophisticated batching and automatic backpressure handling</li>
        <li><strong>Resilience:</strong> OTP supervision trees with dead letter queues and exponential backoff for automatic recovery</li>
        <li><strong>Frontend:</strong> TypeScript + React + MaterialUI for responsive campaign dashboards</li>
        <li><strong>Infrastructure:</strong> AWS with Docker, Ansible, and Sentry for production reliability</li>
        <li><strong>Dynamic Reconfiguration:</strong> Zero-downtime pipeline rebuilding when organizations change integration requirements</li>
    </ul>

    <h4>Business Impact & Results</h4>
    <p>This Broadway-based processing system became a key competitive advantage:</p>
    <ul>
        <li><strong>Processed 10M+ campaign actions</strong> with zero data loss across multi-tenant deployments</li>
        <li><strong>Reduced customer onboarding time by 80%</strong> through automated pipeline provisioning</li>
        <li><strong>Achieved 99.9% uptime</strong> for data processing operations across all tenants</li>
        <li><strong>Enabled rapid feature development</strong> with zero-downtime deployment capabilities</li>
        <li><strong>Supported 10x growth</strong> in concurrent campaigns without architectural changes</li>
    </ul>

    <h4>Why Elixir/Phoenix + Broadway?</h4>
    <p>The choice of Elixir was strategic - digital campaigns often experience massive traffic spikes during critical moments. The Actor model and OTP supervision trees provided the fault tolerance needed for mission-critical civic technology. Broadway's multi-stage processing capabilities enabled sophisticated data pipelines with built-in observability and automatic recovery.</p>

    <p>The combination delivered exceptional fault tolerance where individual processor failures are isolated and automatically recovered without affecting other components. The system gracefully handles external service outages, message broker failures, and network partitions while maintaining data integrity.</p>

    <h4>Systemic Infrastructure Impact</h4>
    <p>This project exemplified my approach to "systemic infrastructure building" - creating technical platforms that enable domain experts (activist organizations) to scale their impact. By solving the complex multi-tenancy and reliability challenges, I built infrastructure that amplified dozens of organizations' ability to create social change.</p>

    <h4>Technical Legacy</h4>
    <p>This experience reinforced the power of thoughtful architecture. The robust technical foundation successfully handled real campaign loads and demonstrated how Broadway's processing patterns can solve complex multi-tenancy challenges while delivering significant business value through reliability, efficiency, and scalability.</p>
</div>